slip 13.
1.Write a program to find minimum number of multiplications in Matrix Chain 
Multiplication. 

#include <stdio.h>
#include <limits.h>

// Function to find the minimum number of multiplications needed for matrix chain multiplication
int matrixChainOrder(int dims[], int n) {
    int dp[n][n];

    // dp[i][j] will store the minimum number of multiplications needed for multiplying matrices from i to j

    // Chain length 1, no multiplications needed
    for (int i = 1; i < n; i++)
        dp[i][i] = 0;

    // Chain length 2 to n
    for (int chainLen = 2; chainLen < n; chainLen++) {
        for (int i = 1; i < n - chainLen + 1; i++) {
            int j = i + chainLen - 1;
            dp[i][j] = INT_MAX;
            for (int k = i; k <= j - 1; k++) {
                int cost = dp[i][k] + dp[k + 1][j] + dims[i - 1] * dims[k] * dims[j];
                if (cost < dp[i][j])
                    dp[i][j] = cost;
            }
        }
    }
    return dp[1][n - 1];
}

int main() {
    int dims[] = {10, 30, 5, 60};
    int n = sizeof(dims) / sizeof(dims[0]);

    printf("Minimum number of multiplications needed: %d\n", matrixChainOrder(dims, n));

    return 0;
}

2.Write a program to implement an optimal binary search tree and also calculate the
best case and worst-case complexity.

#include <stdio.h>
#include <limits.h>

// Function to calculate the sum of probabilities from i to j
float sum(float freq[], int i, int j) {
    float s = 0;
    for (int k = i; k <= j; k++)
        s += freq[k];
    return s;
}

// Function to construct optimal BST and return its cost
float optimalBST(float freq[], int n) {
    // Create an auxiliary 2D array for storing costs
    float cost[n][n];

    // For a single node, the cost is equal to its frequency
    for (int i = 0; i < n; i++)
        cost[i][i] = freq[i];

    // Build the table for chains of increasing length
    for (int chainLen = 2; chainLen <= n; chainLen++) {
        for (int i = 0; i <= n - chainLen + 1; i++) {
            int j = i + chainLen - 1;
            cost[i][j] = INT_MAX;
            for (int k = i; k <= j; k++) {
                // Compute the cost of a subtree rooted with k
                float temp = ((k > i) ? cost[i][k - 1] : 0) +
                             ((k < j) ? cost[k + 1][j] : 0) + sum(freq, i, j);
                if (temp < cost[i][j])
                    cost[i][j] = temp;
            }
        }
    }
    return cost[0][n - 1]; // Return the cost of the optimal BST
}

int main() {
    float freq[] = {0.2, 0.1, 0.4, 0.3};
    int n = sizeof(freq) / sizeof(freq[0]);

    printf("Cost of optimal BST: %.2f\n", optimalBST(freq, n));

    return 0;
}
