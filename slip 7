slip 7.

1.Write a program for the Implementation of Dijkstraâ€™s algorithm to find shortest path to
other vertices.
#include <stdio.h>
#include <limits.h>

// Number of vertices in the graph
#define V 6

// Function to find the vertex with minimum distance value, from the set of vertices
// not yet included in shortest path tree
int minDistance(int dist[], int sptSet[]) {
    int min = INT_MAX, min_index;

    for (int v = 0; v < V; v++)
        if (sptSet[v] == 0 && dist[v] <= min)
            min = dist[v], min_index = v;

    return min_index;
}

// Function to print the constructed distance array
void printSolution(int dist[]) {
    printf("Vertex \t Distance from Source\n");
    for (int i = 0; i < V; i++)
        printf("%d \t %d\n", i, dist[i]);
}

// Function that implements Dijkstra's single source shortest path algorithm for a graph
// represented using adjacency matrix representation
void dijkstra(int graph[V][V], int src) {
    int dist[V]; // The output array. dist[i] will hold the shortest distance from src to i

    int sptSet[V]; // sptSet[i] will be true if vertex i is included in shortest path tree or
    // shortest distance from src to i is finalized

    // Initialize all distances as INFINITE and sptSet[] as false
    for (int i = 0; i < V; i++)
        dist[i] = INT_MAX, sptSet[i] = 0;

    // Distance of source vertex from itself is always 0
    dist[src] = 0;

    // Find shortest path for all vertices
    for (int count = 0; count < V - 1; count++) {
        // Pick the minimum distance vertex from the set of vertices not yet processed.
        // u is always equal to src in the first iteration.
        int u = minDistance(dist, sptSet);

        // Mark the picked vertex as processed
        sptSet[u] = 1;

        // Update dist value of the adjacent vertices of the picked vertex.
        for (int v = 0; v < V; v++)

            // Update dist[v] only if it is not in sptSet, there is an edge from u to v,
            // and the total weight of path from src to v through u is smaller than current value of dist[v]
            if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX
                && dist[u] + graph[u][v] < dist[v])
                dist[v] = dist[u] + graph[u][v];
    }

    // Print the constructed distance array
    printSolution(dist);
}

int main() {
    // Sample graph represented using adjacency matrix
    int graph[V][V] = {
        {0, 4, 0, 0, 0, 0},
        {4, 0, 8, 0, 0, 0},
        {0, 8, 0, 7, 0, 4},
        {0, 0, 7, 0, 9, 14},
        {0, 0, 0, 9, 0, 10},
        {0, 0, 4, 14, 10, 0}
    };

    // Print the solution
    dijkstra(graph, 0);

    return 0;
}

2.Write a program for finding Topological sorting for Directed Acyclic Graph (DAG).


#include <stdio.h>
#include <stdlib.h>

// A structure to represent a node in the adjacency list
struct Node {
    int vertex;
    struct Node* next;
};

// A structure to represent an adjacency list
struct AdjList {
    struct Node* head;
};

// A structure to represent a graph
struct Graph {
    int V;
    struct AdjList* array;
};

// Function to create a new node
struct Node* createNode(int vertex) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->vertex = vertex;
    newNode->next = NULL;
    return newNode;
}

// Function to create a graph with V vertices
struct Graph* createGraph(int V) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->V = V;
    graph->array = (struct AdjList*)malloc(V * sizeof(struct AdjList));

    for (int i = 0; i < V; ++i)
        graph->array[i].head = NULL;

    return graph;
}

// Function to add an edge to a directed graph
void addEdge(struct Graph* graph, int src, int dest) {
    struct Node* newNode = createNode(dest);
    newNode->next = graph->array[src].head;
    graph->array[src].head = newNode;
}

// A recursive function to do DFS starting from v
void topologicalSortUtil(int v, struct Graph* graph, int visited[], struct Node** stack) {
    visited[v] = 1; // Mark the current node as visited

    struct Node* adjNode = graph->array[v].head;
    while (adjNode) {
        if (!visited[adjNode->vertex])
            topologicalSortUtil(adjNode->vertex, graph, visited, stack);
        adjNode = adjNode->next;
    }

    // Push current vertex to stack which stores the result
    struct Node* temp = createNode(v);
    temp->next = *stack;
    *stack = temp;
}

// Function to perform Topological Sort
void topologicalSort(struct Graph* graph) {
    int visited[graph->V];
    struct Node* stack = NULL;

    // Initialize all vertices as not visited
    for (int i = 0; i < graph->V; i++)
        visited[i] = 0;

    // Call the recursive helper function to store Topological Sort starting from all vertices one by one
    for (int i = 0; i < graph->V; i++)
        if (visited[i] == 0)
            topologicalSortUtil(i, graph, visited, &stack);

    // Print contents of stack
    while (stack != NULL) {
        printf("%d ", stack->vertex);
        stack = stack->next;
    }
}

// Driver program to test above functions
int main() {
    // Create a graph given in the example
    struct Graph* graph = createGraph(6);
    addEdge(graph, 5, 2);
    addEdge(graph, 5, 0);
    addEdge(graph, 4, 0);
    addEdge(graph, 4, 1);
    addEdge(graph, 2, 3);
    addEdge(graph, 3, 1);

    printf("Topological Sort of the given graph: \n");
    topologicalSort(graph);

    return 0;
}
