slip 9.
1.Write a program to implement optimal binary search tree and also calculate the best-case
complexity. 

#include <stdio.h>
#include <limits.h>

// Function to calculate the cost of a subarray of keys
int cost(int freq[], int i, int j) {
    int sum = 0;
    for (int k = i; k <= j; k++)
        sum += freq[k];
    return sum;
}

// Function to construct Optimal Binary Search Tree
int optimalBST(int keys[], int freq[], int n) {
    // Create a 2D array to store costs of subproblems
    int cost[n][n];

    // Initialize the cost for single keys
    for (int i = 0; i < n; i++)
        cost[i][i] = freq[i];

    // Loop for chain length 2 to n
    for (int chainLen = 2; chainLen <= n; chainLen++) {
        for (int i = 0; i <= n - chainLen + 1; i++) {
            int j = i + chainLen - 1;
            cost[i][j] = INT_MAX;

            // Try making all keys in interval keys[i..j] as root
            for (int r = i; r <= j; r++) {
                // Cost when keys[r] becomes root of this subtree
                int c = ((r > i) ? cost[i][r - 1] : 0) +
                        ((r < j) ? cost[r + 1][j] : 0) +
                        cost(freq, i, j);
                if (c < cost[i][j])
                    cost[i][j] = c;
            }
        }
    }

    // Return the minimum cost
    return cost[0][n - 1];
}

int main() {
    int keys[] = {10, 12, 20};
    int freq[] = {34, 8, 50};
    int n = sizeof(keys) / sizeof(keys[0]);
    printf("The cost of Optimal Binary Search Tree is: %d\n", optimalBST(keys, freq, n));
    return 0;
}

2.Write a program to implement Sum of Subset by Backtracking.

#include <stdio.h>

#define MAX 100

// Global variables
int set[MAX]; // Set of elements
int subset[MAX]; // Subset of elements
int n; // Number of elements in the set
int sum; // Target sum

// Function to print the subset
void printSubset(int subset[], int size) {
    printf("Subset with the target sum:\n");
    for (int i = 0; i < size; i++)
        printf("%d ", subset[i]);
    printf("\n");
}

// Function to find subsets with the target sum using backtracking
void findSubset(int set[], int subset[], int index, int subsetSize, int subsetSum, int targetSum) {
    if (subsetSum == targetSum) {
        printSubset(subset, subsetSize);
        return;
    }

    // Include elements in the subset one by one
    for (int i = index; i < n; i++) {
        // Check if including current element in the subset exceeds target sum
        if (subsetSum + set[i] <= targetSum) {
            // Include current element in the subset
            subset[subsetSize] = set[i];
            // Recur with the updated subset
            findSubset(set, subset, i + 1, subsetSize + 1, subsetSum + set[i], targetSum);
        }
    }
}

// Function to initialize variables and call the findSubset function
void sumOfSubset(int set[], int n, int targetSum) {
    findSubset(set, subset, 0, 0, 0, targetSum);
}

int main() {
    printf("Enter the number of elements in the set: ");
    scanf("%d", &n);

    printf("Enter the elements of the set: ");
    for (int i = 0; i < n; i++)
        scanf("%d", &set[i]);

    printf("Enter the target sum: ");
    scanf("%d", &sum);

    sumOfSubset(set, n, sum);

    return 0;
}

