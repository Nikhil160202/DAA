slip 19.
1.Write a program to determine if a given graph is a Hamiltonian cycle or
Not.

#include <stdio.h>
#include <stdbool.h>

#define MAX_VERTICES 100

bool isSafe(int v, bool graph[MAX_VERTICES][MAX_VERTICES], int path[], int pos, int V) {
    // Check if this vertex is adjacent to the previously added vertex
    if (!graph[path[pos - 1]][v])
        return false;

    // Check if the vertex has not already been included
    for (int i = 0; i < pos; i++)
        if (path[i] == v)
            return false;

    return true;
}

bool hamCycleUtil(bool graph[MAX_VERTICES][MAX_VERTICES], int path[], int pos, int V) {
    // Base case: If all vertices are included in Hamiltonian Cycle
    if (pos == V) {
        // And if there is an edge from the last included vertex to the first vertex
        if (graph[path[pos - 1]][path[0]])
            return true;
        else
            return false;
    }

    // Try different vertices as next candidate in Hamiltonian Cycle
    for (int v = 1; v < V; v++) {
        if (isSafe(v, graph, path, pos, V)) {
            path[pos] = v;
            if (hamCycleUtil(graph, path, pos + 1, V))
                return true;
            path[pos] = -1; // Backtrack
        }
    }

    // If no vertex can be added to Hamiltonian Cycle
    return false;
}

bool hamCycle(bool graph[MAX_VERTICES][MAX_VERTICES], int V) {
    int path[MAX_VERTICES];
    for (int i = 0; i < V; i++)
        path[i] = -1;

    // Start from the first vertex
    path[0] = 0;
    if (!hamCycleUtil(graph, path, 1, V)) {
        printf("No Hamiltonian cycle exists\n");
        return false;
    }

    printf("Hamiltonian cycle exists. Path:\n");
    for (int i = 0; i < V; i++)
        printf("%d ", path[i]);
    printf("%d\n", path[0]);

    return true;
}

int main() {
    int V, E;
    printf("Enter the number of vertices in the graph: ");
    scanf("%d", &V);
    printf("Enter the number of edges in the graph: ");
    scanf("%d", &E);

    bool graph[MAX_VERTICES][MAX_VERTICES] = {{false}};
    printf("Enter the adjacency matrix representation of the graph:\n");
    for (int i = 0; i < E; i++) {
        int u, v;
        printf("Enter edge %d (vertex u, vertex v): ", i + 1);
        scanf("%d %d", &u, &v);
        graph[u - 1][v - 1] = true;
        graph[v - 1][u - 1] = true; // Undirected graph
    }

    hamCycle(graph, V);

    return 0;
}

2.Write a program to show board configuration of 4 queensâ€™ problem.

#include <stdio.h>

#define N 4

// Function to print the board configuration
void printBoard(int board[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("%c ", board[i][j] == 1 ? 'Q' : '-');
        }
        printf("\n");
    }
    printf("\n");
}

// Function to check if it's safe to place a queen at board[row][col]
bool isSafe(int board[N][N], int row, int col) {
    int i, j;

    // Check this row on left side
    for (i = 0; i < col; i++)
        if (board[row][i])
            return false;

    // Check upper diagonal on left side
    for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
        if (board[i][j])
            return false;

    // Check lower diagonal on left side
    for (i = row, j = col; j >= 0 && i < N; i++, j--)
        if (board[i][j])
            return false;

    return true;
}

// Recursive function to solve N-Queens problem
bool solveNQUtil(int board[N][N], int col) {
    if (col >= N)
        return true;

    // Consider this column and try placing a queen in all rows one by one
    for (int i = 0; i < N; i++) {
        // Check if the queen can be placed on board[i][col]
        if (isSafe(board, i, col)) {
            // Place this queen in board[i][col]
            board[i][col] = 1;

            // Recur to place rest of the queens
            if (solveNQUtil(board, col + 1))
                return true;

            // If placing queen in board[i][col] doesn't lead to a solution then backtrack
            board[i][col] = 0; // Backtrack
        }
    }

    // If the queen cannot be placed in any row in this column, return false
    return false;
}

// Function to solve N-Queens problem
void solveNQ() {
    int board[N][N] = {{0}};

    if (!solveNQUtil(board, 0)) {
        printf("Solution does not exist");
        return;
    }

    printBoard(board);
}

int main() {
    printf("Board configuration for 4 Queens problem:\n");
    solveNQ();
    return 0;
}
