slip 2

1.Write a program to sort n randomly generated elements using Heapsort method

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Function prototypes
void heapSort(int arr[], int n);
void heapify(int arr[], int n, int i);
void swap(int* a, int* b);
void printArray(int arr[], int n);

int main() {
    int n;
    printf("Enter the number of elements: ");
    scanf("%d", &n);

    int arr[n];

    // Generating random numbers
    srand(time(NULL));
    for (int i = 0; i < n; i++) {
        arr[i] = rand() % 1000; // Generating numbers between 0 and 999
    }

    printf("Array before sorting:\n");
    printArray(arr, n);

    // Measure time before sorting
    clock_t start = clock();

    // Sorting using Heap sortslip 2

1.Write a program to sort n randomly generated elements using Heapsort method

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Function prototypes
void heapSort(int arr[], int n);
void heapify(int arr[], int n, int i);
void swap(int* a, int* b);
void printArray(int arr[], int n);

int main() {
    int n;
    printf("Enter the number of elements: ");
    scanf("%d", &n);

    int arr[n];

    // Generating random numbers
    srand(time(NULL));
    for (int i = 0; i < n; i++) {
        arr[i] = rand() % 1000; // Generating numbers between 0 and 999
    }

    printf("Array before sorting:\n");
    printArray(arr, n);

    // Measure time before sorting
    clock_t start = clock();

    // Sorting using Heap sort
    heapSort(arr, n);

    // Measure time after sorting
    clock_t end = clock();

    printf("Array after sorting:\n");
    printArray(arr, n);

    // Calculate the time taken for sorting
    double time_taken = ((double)(end - start)) / CLOCKS_PER_SEC;
    printf("Time taken to sort %d elements: %f seconds\n", n, time_taken);

    return 0;
}

// Function to perform Heap sort
void heapSort(int arr[], int n) {
    // Build heap (rearrange array)
    for (int i = n / 2 - 1; i >= 0; i--) {
        heapify(arr, n, i);
    }

    // One by one extract an element from heap
    for (int i = n - 1; i > 0; i--) {
        // Move current root to end
        swap(&arr[0], &arr[i]);

        // call max heapify on the reduced heap
        heapify(arr, i, 0);
    }
}

// To heapify a subtree rooted with node i which is an index in arr[]. n is size of heap
void heapify(int arr[], int n, int i) {
    int largest = i; // Initialize largest as root
    int l = 2 * i + 1; // left = 2*i + 1
    int r = 2 * i + 2; // right = 2*i + 2

    // If left child is larger than root
    if (l < n && arr[l] > arr[largest]) {
        largest = l;
    }

    // If right child is larger than largest so far
    if (r < n && arr[r] > arr[largest]) {
        largest = r;
    }

    // If largest is not root
    if (largest != i) {
        swap(&arr[i], &arr[largest]);

        // Recursively heapify the affected sub-tree
        heapify(arr, n, largest);
    }
}

// Function to swap two elements
void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Function to print an array
void printArray(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

2.Write a program to implement Strassen’s Matrix multiplication


#include <stdio.h>
#include <stdlib.h>

// Function prototypes
void strassen(int n, int A[][n], int B[][n], int C[][n]);
void add(int n, int A[][n], int B[][n], int C[][n]);
void subtract(int n, int A[][n], int B[][n], int C[][n]);
void multiply(int n, int A[][n], int B[][n], int C[][n]);
void split(int n, int A[][n], int B[][n], int C[][n], int D[][n]);
void join(int n, int A[][n], int B[][n], int C[][n], int D[][n]);
void printMatrix(int n, int mat[][n]);

int main() {
    int n;

    // Read the size of matrices
    printf("Enter the size of matrices: ");
    scanf("%d", &n);

    int A[n][n], B[n][n], C[n][n]; // Matrices A, B, and C

    // Read elements of matrices A and B
    printf("Enter the elements of matrix A:\n");
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &A[i][j]);

    printf("Enter the elements of matrix B:\n");
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &B[i][j]);

    // Perform Strassen's matrix multiplication
    strassen(n, A, B, C);

    // Print the resulting matrix C
    printf("Resultant matrix C:\n");
    printMatrix(n, C);

    return 0;
}

// Strassen's matrix multiplication algorithm
void strassen(int n, int A[][n], int B[][n], int C[][n]) {
    // Base case: when matrix size is 1
    if (n == 1) {
        C[0][0] = A[0][0] * B[0][0];
        return;
    }

    // Create sub-matrices
    int A11[n/2][n/2], A12[n/2][n/2], A21[n/2][n/2], A22[n/2][n/2];
    int B11[n/2][n/2], B12[n/2][n/2], B21[n/2][n/2], B22[n/2][n/2];
    int C11[n/2][n/2], C12[n/2][n/2], C21[n/2][n/2], C22[n/2][n/2];
    int M1[n/2][n/2], M2[n/2][n/2], M3[n/2][n/2], M4[n/2][n/2], M5[n/2][n/2], M6[n/2][n/2], M7[n/2][n/2];
    int temp1[n/2][n/2], temp2[n/2][n/2];

    // Split matrices A and B into sub-matrices
    split(n, A, A11, A12, A21, A22);
    split(n, B, B11, B12, B21, B22);

    // Calculate 7 temporary matrices
    add(n/2, A11, A22, temp1);
    add(n/2, B11, B22, temp2);
    strassen(n/2, temp1, temp2, M1);

    add(n/2, A21, A22, temp1);
    strassen(n/2, temp1, B11, M2);

    subtract(n/2, B12, B22, temp1);
    strassen(n/2, A11, temp1, M3);

    subtract(n/2, B21, B11, temp1);
    strassen(n/2, A22, temp1, M4);

    add(n/2, A11, A12, temp1);
    strassen(n/2, temp1, B22, M5);

    subtract(n/2, A21, A11, temp1);
    add(n/2, B11, B12, temp2);
    strassen(n/2, temp1, temp2, M6);

    subtract(n/2, A12, A22, temp1);
    add(n/2, B21, B22, temp2);
    strassen(n/2, temp1, temp2, M7);

    // Calculate the resulting sub-matrices
    add(n/2, M1, M4, temp1);
    subtract(n/2, temp1, M5, temp2);
    add(n/2, temp2, M7, C11);

    add(n/2, M3, M5, C12);

    add(n/2, M2, M4, C21);

    add(n/2, M1, M3, temp1);
    subtract(n/2, temp1, M2, temp2);
    add(n/2, temp2, M6, C22);

    // Join the resulting sub-matrices to form C
    join(n, C11, C12, C21, C22, C);
}

// Function to add two matrices
void add(int n, int A[][n], int B[][n], int C[][n]) {
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            C[i][j] = A[i][j] + B[i][j];
}

// Function to subtract two matrices
void subtract(int n, int A[][n], int B[][n], int C[][n]) {
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            C[i][j] = A[i][j] - B[i][j];
}

// Function to multiply two matrices
void multiply(int n, int A[][n], int B[][n], int C[][n]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            C[i][j] = 0;
            for (int k = 0; k < n; k++) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

// Function to split matrix into sub-matrices
void split(int n, int A[][n], int B[][n], int C[][n], int D[][n], int E[][n]) {
    for (int i = 0; i < n/2; i++) {
        for (int j = 0; j < n/2; j++) {
            B[i][j] = A[i][j];           // Top-left
            C[i][j] = A[i][j + n/2];     // Top-right
            D[i][j] = A[i + n/2][j];     // Bottom-left
            E[i][j] = A[i + n/2][j + n/2]; // Bottom-right
        }
    }
}

// Function to join sub-matrices into a single matrix
void join(int n, int A[][n], int B[][n], int C[][n], int D[][n], int E[][n]) {
    for (int i = 0; i < n/2; i++) {
        for (int j = 0; j < n/2; j++) {
            A[i][j] = B[i][j];                     // Top-left
            A[i][j + n/2] = C[i][j];               // Top-right
            A[i + n/2][j] = D[i][j];               // Bottom-left
            A[i + n/2][j + n/2] = E[i][j];         // Bottom-right
        }
    }
}

// Function to print a matrix
void printMatrix(int n, int mat[][n]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%d ", mat[i][j]);
        }
        printf("\n");
    }
}
    heapSort(arr, n);

    // Measure time after sorting
    clock_t end = clock();

    printf("Array after sorting:\n");
    printArray(arr, n);

    // Calculate the time taken for sorting
    double time_taken = ((double)(end - start)) / CLOCKS_PER_SEC;
    printf("Time taken to sort %d elements: %f seconds\n", n, time_taken);

    return 0;
}

// Function to perform Heap sort
void heapSort(int arr[], int n) {
    // Build heap (rearrange array)
    for (int i = n / 2 - 1; i >= 0; i--) {
        heapify(arr, n, i);
    }

    // One by one extract an element from heap
    for (int i = n - 1; i > 0; i--) {
        // Move current root to end
        swap(&arr[0], &arr[i]);

        // call max heapify on the reduced heap
        heapify(arr, i, 0);
    }
}

// To heapify a subtree rooted with node i which is an index in arr[]. n is size of heap
void heapify(int arr[], int n, int i) {
    int largest = i; // Initialize largest as root
    int l = 2 * i + 1; // left = 2*i + 1
    int r = 2 * i + 2; // right = 2*i + 2

    // If left child is larger than root
    if (l < n && arr[l] > arr[largest]) {
        largest = l;
    }

    // If right child is larger than largest so far
    if (r < n && arr[r] > arr[largest]) {
        largest = r;
    }

    // If largest is not root
    if (largest != i) {
        swap(&arr[i], &arr[largest]);

        // Recursively heapify the affected sub-tree
        heapify(arr, n, largest);
    }
}

// Function to swap two elements
void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Function to print an array
void printArray(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

2.Write a program to implement Strassen’s Matrix multiplication


#include <stdio.h>
#include <stdlib.h>

// Function prototypes
void strassen(int n, int A[][n], int B[][n], int C[][n]);
void add(int n, int A[][n], int B[][n], int C[][n]);
void subtract(int n, int A[][n], int B[][n], int C[][n]);
void multiply(int n, int A[][n], int B[][n], int C[][n]);
void split(int n, int A[][n], int B[][n], int C[][n], int D[][n]);
void join(int n, int A[][n], int B[][n], int C[][n], int D[][n]);
void printMatrix(int n, int mat[][n]);

int main() {
    int n;

    // Read the size of matrices
    printf("Enter the size of matrices: ");
    scanf("%d", &n);

    int A[n][n], B[n][n], C[n][n]; // Matrices A, B, and C

    // Read elements of matrices A and B
    printf("Enter the elements of matrix A:\n");
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &A[i][j]);

    printf("Enter the elements of matrix B:\n");
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &B[i][j]);

    // Perform Strassen's matrix multiplication
    strassen(n, A, B, C);

    // Print the resulting matrix C
    printf("Resultant matrix C:\n");
    printMatrix(n, C);

    return 0;
}

// Strassen's matrix multiplication algorithm
void strassen(int n, int A[][n], int B[][n], int C[][n]) {
    // Base case: when matrix size is 1
    if (n == 1) {
        C[0][0] = A[0][0] * B[0][0];
        return;
    }

    // Create sub-matrices
    int A11[n/2][n/2], A12[n/2][n/2], A21[n/2][n/2], A22[n/2][n/2];
    int B11[n/2][n/2], B12[n/2][n/2], B21[n/2][n/2], B22[n/2][n/2];
    int C11[n/2][n/2], C12[n/2][n/2], C21[n/2][n/2], C22[n/2][n/2];
    int M1[n/2][n/2], M2[n/2][n/2], M3[n/2][n/2], M4[n/2][n/2], M5[n/2][n/2], M6[n/2][n/2], M7[n/2][n/2];
    int temp1[n/2][n/2], temp2[n/2][n/2];

    // Split matrices A and B into sub-matrices
    split(n, A, A11, A12, A21, A22);
    split(n, B, B11, B12, B21, B22);

    // Calculate 7 temporary matrices
    add(n/2, A11, A22, temp1);
    add(n/2, B11, B22, temp2);
    strassen(n/2, temp1, temp2, M1);

    add(n/2, A21, A22, temp1);
    strassen(n/2, temp1, B11, M2);

    subtract(n/2, B12, B22, temp1);
    strassen(n/2, A11, temp1, M3);

    subtract(n/2, B21, B11, temp1);
    strassen(n/2, A22, temp1, M4);

    add(n/2, A11, A12, temp1);
    strassen(n/2, temp1, B22, M5);

    subtract(n/2, A21, A11, temp1);
    add(n/2, B11, B12, temp2);
    strassen(n/2, temp1, temp2, M6);

    subtract(n/2, A12, A22, temp1);
    add(n/2, B21, B22, temp2);
    strassen(n/2, temp1, temp2, M7);

    // Calculate the resulting sub-matrices
    add(n/2, M1, M4, temp1);
    subtract(n/2, temp1, M5, temp2);
    add(n/2, temp2, M7, C11);

    add(n/2, M3, M5, C12);

    add(n/2, M2, M4, C21);

    add(n/2, M1, M3, temp1);
    subtract(n/2, temp1, M2, temp2);
    add(n/2, temp2, M6, C22);

    // Join the resulting sub-matrices to form C
    join(n, C11, C12, C21, C22, C);
}

// Function to add two matrices
void add(int n, int A[][n], int B[][n], int C[][n]) {
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            C[i][j] = A[i][j] + B[i][j];
}

// Function to subtract two matrices
void subtract(int n, int A[][n], int B[][n], int C[][n]) {
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            C[i][j] = A[i][j] - B[i][j];
}

// Function to multiply two matrices
void multiply(int n, int A[][n], int B[][n], int C[][n]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            C[i][j] = 0;
            for (int k = 0; k < n; k++) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

// Function to split matrix into sub-matrices
void split(int n, int A[][n], int B[][n], int C[][n], int D[][n], int E[][n]) {
    for (int i = 0; i < n/2; i++) {
        for (int j = 0; j < n/2; j++) {
            B[i][j] = A[i][j];           // Top-left
            C[i][j] = A[i][j + n/2];     // Top-right
            D[i][j] = A[i + n/2][j];     // Bottom-left
            E[i][j] = A[i + n/2][j + n/2]; // Bottom-right
        }
    }
}

// Function to join sub-matrices into a single matrix
void join(int n, int A[][n], int B[][n], int C[][n], int D[][n], int E[][n]) {
    for (int i = 0; i < n/2; i++) {
        for (int j = 0; j < n/2; j++) {
            A[i][j] = B[i][j];                     // Top-left
            A[i][j + n/2] = C[i][j];               // Top-right
            A[i + n/2][j] = D[i][j];               // Bottom-left
            A[i + n/2][j + n/2] = E[i][j];         // Bottom-right
        }
    }
}

// Function to print a matrix
void printMatrix(int n, int mat[][n]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%d ", mat[i][j]);
        }
        printf("\n");
    }
}
